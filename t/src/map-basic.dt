(import cstdio) 

(import map)
(std.concepts.instantiate Map int int)

(def make-pair (macro intern (v1 v2) 
  (std.macros.qq (Pair int int) ((first (uq v1)) (second (uq v2))))))

(def main
  (fn extern-c int (void)
    (def m  (var auto (Map int int)))
    (def mp (var auto (p (Map int int)) (# m)))

    (init mp)
    (if (= mp mp)
        (printf "Equal\n")
        (printf "Not equal\n"))

    (insert mp (make-pair 1 2))
    (insert mp (make-pair 3 4))
    (insert mp (make-pair 5 6))
    (insert mp (make-pair 7 8))

    (erase mp 3)

    (let ((b \ (begin mp))
          (e \ (end mp)))
      (for true (!= b e) (setv b (successor b))
        (printf "%d: %d\n" (@: (@source b) first)
                           (@: (@source b) second))))

    (printf "%d: %d\n" (@source (find mp 5)))
    (printf "%d: %d\n" (@source (find mp 7)))
    (printf "%d: %d\n" (@source (find mp 1)))

    (if (= mp mp)
        (printf "Equal\n")
        (printf "Not equal\n"))

    0))
