#|
@module array

Concept macro for a fixed-size container. Apart from the `Array` macro
and concept macro, the documentation in this module is for a generated
array instance of type `T`, with size `N`.

All of the functions that take `Iterator` arguments are defined for
`ReverseIterator`s as well, notwithstanding that there is no
documentation for those instances.

The `Array` type implements `RandomAccessContainer`. Its iterators
implement `OutputIterator` and `RandomAccessIterator`.
|#
(module array (attr cto))

(import cstdio)
(import macros)
(import assert)
(import utility)
(import concepts)
(import derivations)
(import algorithms)

#|
@macro Array

Expands to the concrete type name of the `Array` generated by way of
the concept macro.

@param T    The type node.
|#
(def Array
  (macro extern (T N)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string mcontext "array" T N typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (std.macros.mnfv mcontext typename)))
      (return n))))

(using-namespace std.macros
(using-namespace std.concepts

#|
@concept-macro Array

Expands to an `Array` definition over the relevant type. Note that `T`
must also implement `LessThanComparable`.

@param T    The type for the elements of the array.
@param N    The length of the array.
|#
(def-concept-macro Array extern ((T EqualityComparable) (N Value))
  (if (has-errors mcontext 
                  (qq std.concepts.implements (uq T) LessThanComparable))
      (return (qq std.concepts.implements (uq T) LessThanComparable))
      0)

  (and (!= 0 (@:@ N is-list))
       (do (report-error mcontext N "second argument must be an atom")
           (return (nullptr DNode))))

  (let ((typename       (array-of 250 char))
        (etypename      (array-of 250 char)))
    ; Generate the type names and nodes, and register the main 'array'
    ; type.
    (and (not (make-type-string mcontext "array" T N typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string mcontext "Array" T N etypename))
         (return (nullptr DNode)))

    (def typenode (var auto (p DNode) (mnfv mcontext typename)))

    (register-type mcontext typename etypename)

    (qq do

    (import cstring)
    (import derivations)

    (using-namespace std.macros
    (using-namespace std.concepts

    #| 
    @struct (Array T N)

    The core array structure type.

    @linkage extern
    |#
    (def (uq typenode)
      (struct extern ((elements (array-of (uq N) (uq T))))))

    #|
    @fn init

    Initialise an array. (This is a no-op for this container: to
    actually zero the array, it is necessary to iterate over it and
    set values accordingly.)

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    bool
    |#
    (def init (fn extern bool ((arrp (p (uq typenode))))
      true))

    #|
    @fn empty

    Determine whether the array is empty. (Since arrays have a fixed
    size, this will always return true, unless the array actually has
    a size of zero.)

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    bool
    |#
    (def empty (fn extern bool ((arrp (p (uq typenode))))
      (= 0 (uq N))))

    #|
    @fn size

    Returns the number of elements in the array (This is `N`, for all
    instances of the array.)

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    size
    |#
    (def size (fn extern size ((arrp (p (uq typenode))))
      (uq N)))

    #|
    @fn max-size

    Returns the number of elements that can be accommodated by the
    array. (This is also `N`, for all instances of the array.)

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    size
    |#
    (def max-size (fn extern size ((arrp (p (uq typenode))))
      (uq N)))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the array. This
    only uses the type node for dispatch purposes, so it's safe to
    call this with e.g. `(nullptr (Array T N))` as the argument.

    @param lst      A type node.
    @param-type     (p (Array T N))
    @linkage        extern
    |#
    (def value-type
      (macro extern ((arrp (p (uq typenode))))
        (qq do (uq T))))

    #|
    @macro size-type

    Expands to the underlying size type of the array.

    @param lst      A type node.
    @param-type     (p (Array T N))
    @linkage        extern
    |#
    (def size-type
      (macro extern ((arrp (p (uq typenode))))
        (qq do size)))

    #|
    @macro difference-type

    Expands to the underlying iterator difference type of the array.

    @param lst      A type node.
    @param-type     (p (Array T N))
    @linkage        extern
    |#
    (def difference-type
      (macro extern ((arrp (p (uq typenode))))
        (qq do ptrdiff)))

    #|
    @struct (Iterator (Array T N))

    @linkage extern
    |#
    (def (Iterator (Array (uq T) (uq N)))
      (struct extern ((element (p (uq T)))
                      (arrp    (p (uq typenode))))))

    #|
    @fn begin

    Returns the iterator for the first array element.

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def begin (fn extern (Iterator (Array (uq T) (uq N)))
                             ((arrp (p (uq typenode))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (cast (:@ arrp elements)
                        (p (uq T))))))))

    #|
    @fn end

    Returns the iterator representing the end of the list (sentinel).

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def end (fn extern (Iterator (Array (uq T) (uq N)))
                            ((arrp (p (uq typenode))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p+ (cast (:@ arrp elements) 
                            (p (uq T)))
                      (cast (uq N) size)))))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the iterator.

    @param iter     A type node.
    @param-type     (p (Iterator (Array T N)))
    @linkage        extern
    |#
    (def value-type 
      (macro extern ((arrp (p (Iterator (Array (uq T) (uq N))))))
        (qq do (uq T))))
 
    #|
    @macro distance-type

    Expands to the underlying distance type of the iterator.

    @param iter     A type node.
    @param-type     (p (Iterator (Array T)))
    @linkage        extern
    |#
    (def distance-type 
      (macro extern ((arrp (p (Iterator (Array (uq T) (uq N))))))
        (qq do size)))

    #|
    @fn @source

    Returns the iterator's value.

    @param iter     An iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    T
    |#
    (def @source (fn extern (uq T) 
                            ((iter (Iterator (Array (uq T) (uq N)))))
      (@ (@: iter element))))

    #|
    @fn source

    Returns a pointer to the iterator's value.

    @param iter     An iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    (p T)
    |#
    (def source (fn extern (p (uq T)) 
                            ((iter (Iterator (Array (uq T) (uq N)))))
      (@: iter element)))

    #|
    @fn sink

    Set the given value at the specified position in the list.

    @param iter     An iterator.
    @param-type     (Iterator (Array T N))
    @param v        The new value.
    @param-type     T
    @return-type    bool
    |#
    (def sink (fn extern bool ((iter (Iterator (Array (uq T) (uq N))))
                               (v (uq T)))
      (setf (@: iter element) v)))

    #|
    @fn successor

    Returns the iterator for the position that follows the argument
    iterator.

    @param iter     An iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def successor (fn extern (Iterator (Array (uq T) (uq N)))
                              ((iter (Iterator (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp (@: iter arrp))
         (element (p+ (@: iter element) 1))))))

    #|
    @fn predecessor

    Returns the iterator for the position just before the argument
    iterator.

    @param iter     An iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def predecessor (fn extern (Iterator (Array (uq T) (uq N))) 
                                ((iter (Iterator (Array (uq T) (uq N)))))
      ((Iterator (Array (uq T) (uq N))) 
        ((arrp (@: iter arrp))
         (element (p- (@: iter element) 1))))))

    #|
    @fn =

    @param iter1    The first iterator.
    @param-type     (Iterator (Array T N))
    @param iter2    The second iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    bool
    |#
    (def = (fn extern bool ((iter1 (Iterator (Array (uq T) (uq N))))
                            (iter2 (Iterator (Array (uq T) (uq N)))))
      (p= (@: iter1 element) (@: iter2 element))))

    #|
    @fn <

    @param iter1    The first iterator.
    @param-type     (Iterator (Array T N))
    @param iter2    The second iterator.
    @param-type     (Iterator (Array T N))
    @linkage        extern
    @return-type    bool
    |#
    (def < (fn extern bool ((iter1 (Iterator (Array (uq T) (uq N))))
                            (iter2 (Iterator (Array (uq T) (uq N)))))
      (p< (@: iter1 element) (@: iter2 element))))

    (implement Type (Iterator (Array (uq T) (uq N))))
    (instantiate != (Iterator (Array (uq T) (uq N))))

    (mfor F (<= > >=)
      (instantiate F (Iterator (Array (uq T) (uq N)))))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))
    
    (instantiate swap (Iterator (Array (uq T) (uq N))))
    (implement Assignable (Iterator (Array (uq T) (uq N))))

    #|
    @fn +

    @param iter     An array iterator.
    @param-type     (Iterator (Array T N))
    @param n        The number of steps forward.
    @param-type     size
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def +
      (fn extern (Iterator (Array (uq T) (uq N)))
                           ((iter1 (Iterator (Array (uq T) (uq N))))
                           (n size))
        ((Iterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p+ (@: iter1 element) n))))))

    #|
    @fn -

    @param iter     An array iterator.
    @param-type     (Iterator (Array T N))
    @param n        The number of steps backward.
    @param-type     size
    @linkage        extern
    @return-type    (Iterator (Array T N))
    |#
    (def -
      (fn extern (Iterator (Array (uq T) (uq N)))
                           ((iter1 (Iterator (Array (uq T) (uq N))))
                           (n size))
        ((Iterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p- (@: iter1 element) n))))))

    #|
    @struct (ReverseIterator (Array T N))

    @linkage extern
    |#
    (def (ReverseIterator (Array (uq T) (uq N)))
      (struct extern ((element (p (uq T)))
                      (arrp    (p (uq typenode))))))

    #|
    @fn rbegin

    Returns the iterator for the last array element.

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    (ReverseIterator (Array T N))
    |#
    (def rbegin (fn extern (ReverseIterator (Array (uq T) (uq N)))
                             ((arrp (p (uq typenode))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p+ (cast (:@ arrp elements)
                            (p (uq T)))
                      (cast (- (uq N) 1) size)))))))

    #|
    @fn rend

    Returns the iterator representing the beginning of the array (sentinel).

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    (ReverseIterator (Array T N))
    |#
    ; This probably isn't safe in all cases (-1 at the beginning).
    (def rend (fn extern (ReverseIterator (Array (uq T) (uq N)))
                          ((arrp (p (uq typenode))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp arrp)
         (element (p- (cast (:@ arrp elements)
                            (p (uq T)))
                      (cast 1 size))))))) 

    (def value-type 
      (macro extern ((arrp (p (ReverseIterator (Array (uq T) (uq N))))))
        (qq do (uq T))))

    (def distance-type 
      (macro extern ((arrp (p (ReverseIterator (Array (uq T) (uq N))))))
        (qq do size)))

    (def @source 
      (fn extern (uq T) ((riter (ReverseIterator (Array (uq T) (uq N)))))
        (@ (@: riter element))))

    (def source 
      (fn extern (p (uq T)) ((riter (ReverseIterator (Array (uq T) (uq N)))))
        (@: riter element)))

    (def sink (fn extern bool ((iter (ReverseIterator (Array (uq T) (uq N))))
                               (v (uq T)))
      (setf (@: iter element) v)))
    
    (def successor (fn extern (ReverseIterator (Array (uq T) (uq N)))
                         ((riter (ReverseIterator (Array (uq T) (uq N)))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp (@: riter arrp))
         (element (p- (@: riter element) 1))))))

    (def predecessor (fn extern (ReverseIterator (Array (uq T) (uq N))) 
                         ((riter (ReverseIterator (Array (uq T) (uq N)))))
      ((ReverseIterator (Array (uq T) (uq N))) 
        ((arrp (@: riter arrp))
         (element (p+ (@: riter element) 1))))))

    (def = (fn extern bool ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                            (iter2 (ReverseIterator (Array (uq T) (uq N)))))
      (p= (@: iter1 element) (@: iter2 element))))

    (implement Type (ReverseIterator (Array (uq T) (uq N))))
    (instantiate != (ReverseIterator (Array (uq T) (uq N))))

    (def < (fn extern bool ((riter1 (ReverseIterator (Array (uq T) (uq N))))
                            (riter2 (ReverseIterator (Array (uq T) (uq N)))))
      (p> (@: riter1 element) (@: riter2 element))))

    (mfor F (<= > >=)
      (instantiate F (ReverseIterator (Array (uq T) (uq N)))))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))

    (instantiate swap (ReverseIterator (Array (uq T) (uq N))))
    (implement Assignable (ReverseIterator (Array (uq T) (uq N))))

    (def +
      (fn extern (ReverseIterator (Array (uq T) (uq N)))
                           ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                           (n size))
        ((ReverseIterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p- (@: iter1 element) n))))))

    (def -
      (fn extern (ReverseIterator (Array (uq T) (uq N)))
                           ((iter1 (ReverseIterator (Array (uq T) (uq N))))
                           (n size))
        ((ReverseIterator (Array (uq T) (uq N))) 
          ((arrp (@: iter1 arrp))
           (element (p+ (@: iter1 element) n))))))

    ; Container relations and concepts.

    (def setf-copy (fn extern bool ((dst (p (uq typenode)))
                                    (src (p (uq typenode))))
      (init dst)
      (let ((b1 \ (begin src))
            (e1 \ (end   src))
            (b2 \ (begin dst))
            (e2 \ (end   dst)))
        (for true (!= b1 e1) (do (setv b1 (successor b1))
                                 (setv b2 (successor b2)))
          (sink b2 (@source b1))))
      true))

    (def setf-assign (fn extern bool ((dst (p (uq typenode)))
                                      (src (p (uq typenode))))
      (setf-copy dst src)))

    (implement Type (uq typenode))
    (instantiate swap (uq typenode))

    (implement Container (uq typenode))
    (implement Type (p (uq typenode)))
    (mfor F (= <)
      (instantiate F (uq typenode)))
    (mfor F (!= <= > >=)
      (instantiate F (p (uq typenode))))

    (mfor F (= != < > <= >=)
      (def F
        (fn extern bool ((fst (uq typenode))
                         (snd (uq typenode)))
          (F (# fst) (# snd)))))

    (implement EqualityComparable (uq typenode))
    (implement LessThanComparable (uq typenode))

    #|
    @fn front

    Returns the value of the first element in the array.

    @param lst      An array pointer.
    @param-type     (p (Array T N))
    @linkage        extern
    @return-type    T
    |#
    (def front (fn extern (uq T) ((arrp (p (uq typenode))))
      (@source (begin arrp))))

    #|
    @fn back

    Returns the value of the last element in the array.

    @param lst      An array pointer.
    @param-type     (p (Arrat T N))
    @linkage        extern
    @return-type    T
    |#
    (def back (fn extern (uq T) ((arrp (p (uq typenode))))
      (@source (rbegin arrp))))

    #|
    fn $

    @param arrp     An array pointer.
    @param-type     (p (Array T N))
    @param index    The index of the element.
    @param-type     int
    @linkage        extern
    @return-type    (p T)
    |#
    (def $
      (fn extern (p (uq T)) ((arrp (p (uq typenode))) (index int))
        (p+ (cast (:@ arrp elements)
                  (p (uq T)))
            (cast index size))))

    #|
    fn $

    @param arrp     An array pointer.
    @param-type     (p (Array T N))
    @param index    The index of the element.
    @param-type     size
    @linkage        extern
    @return-type    (p T)
    |#
    (def $
      (fn extern (p (uq T)) ((arrp (p (uq typenode))) (index size))
        (p+ (cast (:@ arrp elements)
                  (p (uq T)))
            index)))

    (implement EqualityComparable (Iterator (Array (uq T) (uq N))))
    (implement EqualityComparable (ReverseIterator (Array (uq T) (uq N))))
    (implement LessThanComparable (Iterator (Array (uq T) (uq N))))
    (implement LessThanComparable (ReverseIterator (Array (uq T) (uq N))))
    (implement InputIterator (Iterator (Array (uq T) (uq N))))
    (implement InputIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement OutputIterator (Iterator (Array (uq T) (uq N))))
    (implement OutputIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement RandomAccessIterator (Iterator (Array (uq T) (uq N))))
    (implement RandomAccessIterator (ReverseIterator (Array (uq T) (uq N))))
    (implement RandomAccessContainer (uq typenode))
    )))
)))

)
