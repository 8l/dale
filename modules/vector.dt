#|
@module vector

Concept macro for a vector. Apart from the `Vector` macro and concept
macro, the documentation in this module is for a generated vector
instance of type `T`.

All of the functions that take `Iterator` arguments are defined for
`ReverseIterator`s as well, notwithstanding that there is no
documentation for those instances.

The `Vector` type implements `BackInsertionSequence` and
`RandomAccessContainer`. Its iterators implement `OutputIterator` and
`RandomAccessIterator`.

|#
(module vector (attr cto))

(import cstdio)
(import macros)
(import cstdlib)
(import math)
(import concepts)
(import utility)

#|
@macro Vector

Expands to the concrete type name of the `Vector` generated by way of
the concept macro.

@param T    The type node.
|#
(def Vector
  (macro extern (T)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string mcontext "vector" T typename))
           (return T))
      (def n (var auto (p DNode) (std.macros.mnfv mcontext typename)))
      (return n))))

(using-namespace std.macros
(using-namespace std.concepts

#|
@concept-macro Vector

Expands to a `Vector` definition over the relevant type. Note that `T`
must also implement `LessThanComparable`.

@param T    The type node.
|#
(def-concept-macro Vector extern ((T EqualityComparable))
  (if (has-errors mcontext
                  (qq std.concepts.implements (uq T) LessThanComparable))
      (return (qq std.concepts.implements (uq T) LessThanComparable))
      0)
  
  (let ((typename (array-of 250 char))
        (etypename (array-of 250 char)))
    ; Generate the type names and nodes, and register the main 'vector'
    ; type name.
    (and (not (make-type-string mcontext "vector" T typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string mcontext "Vector" T etypename))
         (return (nullptr DNode)))

    (def typenode (var auto (p DNode) (std.macros.mnfv mcontext typename)))
 
    (register-type mcontext typename etypename)

    (qq do

    (using-namespace std.macros
    (using-namespace std.concepts
   
    (import derivations)
    (import algorithms)
    (instantiate min size)

    #|
    @struct (Vector T)

    The core vector structure type.

    @linkage extern
    |#
    (def (uq typenode)
      (struct extern ((first-element (p (uq T)))
                      (last-element  (p (uq T)))
                      (size          size)
                      (capacity      size))))

    #|
    @fn init

    Initialise a vector by providing a specific capacity.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param cap      The capacity of the new vector.
    @param-type     int
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((vecp (p (uq typenode))) (cap int))
        (setf (:@ vecp first-element)
              (malloc' cap (uq T)))
        (setf (:@ vecp last-element)  (@:@ vecp first-element))
        (setf (:@ vecp size) (cast 0 size))
        (setf (:@ vecp capacity) (cast cap size))
        true))

    #|
    @fn init

    Initialise a vector.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    bool
    |#
    (def init
      (fn extern bool ((vecp (p (uq typenode))))
        (init vecp 0)))

    #|
    @fn empty

    Determine whether the vector is empty.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    bool
    |#
    (def empty
      (fn extern bool ((vecp (p (uq typenode))))
        (= (@:@ vecp size) (cast 0 size))))

    #|
    @fn size

    Returns the number of elements in the vector.

    @param vecp     A vectorp ointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    size
    |#
    (def size
      (fn extern size ((vecp (p (uq typenode))))
        (@:@ vecp size)))

    #|
    @fn max-size

    Returns the number of elements that can be accommodated by the
    vector.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    size
    |#
    (def max-size
      (fn extern size ((vecp (p (uq typenode))))
        (- (cast 0 size) (cast 1 size))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the vector.
    This only uses the type node for dispatch purposes, so it's safe
    to call this with e.g. `(nullptr (Vector T))` as the argument.

    @param vecp     A type node.
    @param-type     (p (Vector T))
    @linkage        extern
    |#
    (def value-type
      (macro extern ((vecp (p (uq typenode))))
        (qq do (uq T))))

    #|
    @macro size-type

    Expands to the underlying size type of the vector.

    @param vecp     A type node.
    @param-type     (p (Vector T))
    @linkage        extern
    |#
    (def size-type
      (macro extern ((vecp (p (uq typenode))))
        (qq do size)))

    #|
    @macro difference-type

    Expands to the underlying iterator difference type of the vector.

    @param vecp     A type node.
    @param-type     (p (Vector T))
    @linkage        extern
    |#
    (def difference-type
      (macro extern ((vecp (p (uq typenode))))
        (qq do ptrdiff)))

    #|
    @fn front

    Returns the value of the first element in the vector.

    @param vecp     A vector pointer.
    @param-type     (p (List T))
    @linkage        extern
    @return-type    T
    |#
    (def front
      (fn extern (uq T) ((vecp (p (uq typenode))))
        (@ (@ (:@ vecp first-element)))))

    #|
    @fn back

    Returns the value of the last element in the vector.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    T
    |#
    (def back
      (fn extern (uq T) ((vecp (p (uq typenode))))
        (@ (@ (:@ vecp last-element)))))

    #|
    @fn pop-back

    Removes an element from the end of the vector.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    void
    |#
    (def pop-back
      (fn extern void ((vecp (p (uq typenode))))
        (let ((value \ (:@ vecp last-element)))
          (destroy value)
          (setf (:@ vecp size) (- (@:@ vecp size) (cast 1 size)))
          (setf (:@ vecp last-element)
                (p- (@:@ vecp last-element) 1))
          (return))))

    #|
    @fn resize

    Change the vector's capacity.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param cap      The new capacity for the vector.
    @param-type     size
    @linkage        extern
    @return-type    bool
    |#
    (def resize
      (fn extern bool ((vecp (p (uq typenode))) (new-capacity size))
        (let ((cc \ (@:@ vecp capacity))
              (cs \ (@:@ vecp size)))
          (and (= cc new-capacity)
               (return true))
          (while (< new-capacity cs)
            (pop-back vecp)
            (setv cs (- cs (cast 1 size))))
          (setf (:@ vecp first-element)
                (cast (realloc (cast (@ (:@ vecp first-element)) (p void))
                               (* (cast new-capacity size) 
                                  (sizeof (uq T)))) 
                      (p (uq T))))
          (setf (:@ vecp capacity) new-capacity)
          (setf (:@ vecp size) (min (@ (:@ vecp size)) new-capacity))
          (setf (:@ vecp last-element)
                (p+ (@ (:@ vecp first-element)) 
                    (@ (:@ vecp size))))
          true)))

    #|
    @fn reserve

    Increase the vector's capacity by the specified amount.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param extra 
    @param-type     size
    @linkage        extern
    @return-type    bool
    |#
    (def reserve
      (fn extern bool ((vecp (p (uq typenode))) (extra size))
        (resize vecp (+ extra (@ (:@ vecp capacity))))))

    #|
    @fn push-back

    Adds an element to the end of the vector.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param value    The value to add to the vector.
    @param-type     T
    @linkage        extern
    @return-type    bool
    |#
    (def push-back
      (fn extern bool ((vecp (p (uq typenode))) (value (uq T)))
        (if (= (@:@ vecp capacity) (@:@ vecp size))
            (reserve vecp (cast 1 size))
            true)
        (setf (@:@ vecp last-element) value)
        (setf (:@ vecp last-element)
              (p+ (@:@ vecp last-element) 1))
        (setf (:@ vecp size) (+ (@:@ vecp size) (cast 1 size)))
        true))


    #|
    @fn $

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param value    The index of the element.
    @param-type     int
    @linkage        extern
    @return-type    (p T)
    |#
    (def $
      (fn extern (p (uq T)) ((vecp (p (uq typenode))) (index int))
        (p+ (@:@ vecp first-element) index)))

    #|
    @fn $

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @param value    The index of the element.
    @param-type     size
    @linkage        extern
    @return-type    (p T)
    |#
    (def $
      (fn extern (p (uq T)) ((vecp (p (uq typenode))) (index size))
        (p+ (@:@ vecp first-element) index)))

    #|
    @struct (Iterator (Vector T))

    @linkage extern
    |#
    (def (Iterator (Vector (uq T)))
      (struct extern ((parent-vector (p (uq typenode)))
                      (element       (p (uq T))))))

    #|
    @fn begin

    Returns the iterator for the first vector element.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def begin
      (fn extern (Iterator (Vector (uq T))) ((vecp (p (uq typenode))))
        ((Iterator (Vector (uq T)))
          ((parent-vector vecp)
           (element       (@:@ vecp first-element))))))

    #|
    @fn end

    Returns the iterator representing the end of the vector (sentinel).

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def end
      (fn extern (Iterator (Vector (uq T))) ((vecp (p (uq typenode))))
        ((Iterator (Vector (uq T))) 
          ((parent-vector vecp)
           (element       (@:@ vecp last-element))))))

    #|
    @macro value-type

    Expands to the underlying value type (i.e. `T`) of the iterator.

    @param iter     A type node.
    @param-type     (p (Iterator (Vector T)))
    @linkage        extern
    |#
    (def value-type
      (macro extern ((veciter (p (Iterator (Vector (uq T))))))
        (qq do (uq T))))

    #|
    @macro distance-type

    Expands to the underlying distance type of the iterator.

    @param iter     A type node.
    @param-type     (p (Iterator (Vector T)))
    @linkage        extern
    |#
    (def distance-type
      (macro extern ((veciter (p (Iterator (Vector (uq T))))))
        (qq do size)))

    #|
    @fn @source

    Returns the iterator's value.

    @param iter     An iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    T
    |#
    (def @source
      (fn extern (uq T) ((iter (Iterator (Vector (uq T)))))
        (@ (@: iter element))))

    #|
    @fn source

    Returns a pointer to the iterator's value.

    @param iter     An iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    (p T)
    |#
    (def source
      (fn extern (p (uq T)) ((iter (Iterator (Vector (uq T)))))
        (@ (: iter element))))

    #|
    @fn sink

    Set the given value at the specified position in the vector.

    @param iter     An iterator.
    @param-type     (Iterator (List T))
    @param v        The new value.
    @param-type     T
    @return-type    bool
    |#
    (def sink
      (fn extern bool ((iter (Iterator (Vector (uq T))))
                       (v (uq T)))
        (setf (@ (: iter element)) v)))

    #|
    @fn successor

    Returns the iterator for the position that follows the argument
    iterator.

    @param iter     An iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def successor         
      (fn extern (Iterator (Vector (uq T))) 
                                ((iter (Iterator (Vector (uq T)))))
        (setf (: iter element)
              (p+ (@ (: iter element)) 1))
        (return iter)))

    #|
    @fn predecessor

    Returns the iterator for the position just before the argument
    iterator.

    @param iter     An iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def predecessor
      (fn extern (Iterator (Vector (uq T))) 
                                ((iter (Iterator (Vector (uq T)))))
        (setf (: iter element)
              (p- (@ (: iter element)) 1))
        (return iter)))

    #|
    @fn =

    @param iter1    The first iterator.
    @param-type     (Iterator (Vector T))
    @param iter2    The second iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    bool
    |#
    (def =
      (fn extern bool ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (p= (@ (: iter1 element)) 
            (@ (: iter2 element)))))

    (implement Type (Iterator (Vector (uq T))))
    (instantiate != (Iterator (Vector (uq T))))

    #|
    @fn <

    @param iter1    The first iterator.
    @param-type     (Iterator (Vector T))
    @param iter2    The second iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    bool
    |#
    (def <
      (fn extern bool ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (p< (@ (: iter1 element))
            (@ (: iter2 element)))))

    (mfor F (<= > >=)
      (instantiate F (Iterator (Vector (uq T))))) 

    #|
    @fn +

    @param iter1    The first iterator.
    @param-type     (Iterator (Vector T))
    @param n        The number of steps to advance.
    @param-type     size
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def +
      (fn extern (Iterator (Vector (uq T))) 
                           ((iter1 (Iterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p+ (@: iter1 element) n))
        iter1))

    #|
    @fn -

    @param iter1    The first iterator.
    @param-type     (Iterator (Vector T))
    @param n        The number of steps by which to move backwards.
    @param-type     size
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def -
      (fn extern (Iterator (Vector (uq T))) 
                           ((iter1 (Iterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p- (@: iter1 element) n))
        (return iter1)))

    #|
    @fn distance

    Return the distance between the two iterators.

    @param iter1    The first iterator.
    @param-type     (Iterator (Vector T))
    @param iter2    The second iterator.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    size
    |#
    (def distance
      (fn extern size ((iter1 (Iterator (Vector (uq T))))
                       (iter2 (Iterator (Vector (uq T)))))
        (cast (/ (abs (cast (p- (@: iter1 element)
                                (@: iter2 element)) size)) 
                 (cast (sizeof (uq T)) int)) size)))

    #|
    @struct (ReverseIterator (Vector T))

    @linkage extern
    |#
    (def (ReverseIterator (Vector (uq T)))
      (struct extern ((element (p (uq T))))))

    #|
    @fn rbegin

    Returns the iterator for the last vector element.

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    (ReverseIterator (Vector T))
    |#
    (def rbegin
      (fn extern (ReverseIterator (Vector (uq T))) ((vec (p (uq typenode))))
        (let ((thing (ReverseIterator (Vector (uq T))) 
                     ((element (@ (:@ vec last-element))))))
          (if (!= (@:@ vec size) (cast 0 size))
              (do (setf (: thing element)
                        (p- (@: thing element) 1))
                  0)
              0)
          thing)))

    #|
    @fn rend

    Returns the iterator representing the beginning of the vector
    (sentinel).

    @param vecp     A vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    (ReverseIterator (Vector T))
    |#
    (def rend
      (fn extern (ReverseIterator (Vector (uq T))) ((vec (p (uq typenode))))
        (let ((thing (ReverseIterator (Vector (uq T))) 
                     ((element (@ (:@ vec first-element))))))
          thing)))

    (def value-type
      (macro extern ((veciter (p (ReverseIterator (Vector (uq T))))))
        (qq do (uq T))))

    (def distance-type
      (macro extern ((veciter (p (ReverseIterator (Vector (uq T))))))
        (qq do size)))

    (def @source
      (fn extern (uq T) ((iter (ReverseIterator (Vector (uq T)))))
        (@ (@ (: iter element)))))

    (def source
      (fn extern (p (uq T)) ((iter (ReverseIterator (Vector (uq T)))))
        (@ (: iter element))))
    
    (def sink
      (fn extern bool ((iter (ReverseIterator (Vector (uq T))))
                       (sinker (uq T)))
        (setf (@ (: iter element)) sinker)
        true))

    (def successor         
      (fn extern (ReverseIterator (Vector (uq T))) 
                    ((iter (ReverseIterator (Vector (uq T)))))
        (setf (: iter element)
              (p- (@ (: iter element)) 1))
        (return iter)))

    (def predecessor
      (fn extern (ReverseIterator (Vector (uq T))) 
                    ((iter (ReverseIterator (Vector (uq T)))))
        (setf (: iter element)
              (p+ (@ (: iter element)) 1))
        (return iter)))

    (def =
      (fn extern bool ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (p= (@ (: iter1 element)) 
            (@ (: iter2 element)))))

    (implement Type (ReverseIterator (Vector (uq T))))
    (instantiate != (ReverseIterator (Vector (uq T))))

    (def <
      (fn extern bool ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (p> (@ (: iter1 element)) (p- (@ (: iter2 element)) 1))))

    (mfor F (<= > >=)
      (instantiate F (ReverseIterator (Vector (uq T))))) 

    (def +
      (fn extern (ReverseIterator (Vector (uq T))) 
                           ((iter1 (ReverseIterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p+ (@ (: iter1 element)) n))
        (return iter1)))

    (def -
      (fn extern (ReverseIterator (Vector (uq T))) 
                           ((iter1 (ReverseIterator (Vector (uq T))))
                            (n size))
        (setf (: iter1 element) (p- (@ (: iter1 element)) n))
        (return iter1)))

    (def distance
      (fn extern size ((iter1 (ReverseIterator (Vector (uq T))))
                       (iter2 (ReverseIterator (Vector (uq T)))))
        (cast (/ (abs (cast (p- (@: iter1 element)
                                (@: iter2 element)) size)) 
                 (cast (sizeof (uq T)) int)) size)))

    #|
    @fn insert

    Inserts a new element into the vector before the specified position,
    and returns the iterator for the new element.

    @param vecp     The vector pointer.
    @param-type     (p (Vector T))
    @param iter     The iterator for the position.
    @param-type     (Iterator (Vector T))
    @param value    The new value.
    @param-type     T
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def insert
      (fn extern (Iterator (Vector (uq T))) 
                        ((unused (p (uq typenode)))
                         (iter   (Iterator (Vector (uq T))))
                         (value  (uq T)))
        (let ((vecp          \ (@: iter parent-vector))
              (original-iter \ iter)
              (next1         \ (@source iter))
              (next2         \ (@source iter)))
          (if (<= (@:@ vecp capacity) (size vecp))
              (reserve vecp (@:@ vecp capacity))
              true)
          (if (= (cast 0 size) (size vecp))
              (do (push-back vecp value)
                  (return iter))
              0)
          (setf (:@ vecp size) (+ (@ (:@ vecp size)) (cast 1 size)))
          (while (!= iter (end vecp))
            (setv iter (successor iter))
            (setv next1 (@source iter))
            (sink iter next2)
            (setv next2 next1))
          (setv iter (successor iter))
          (setf (:@ vecp last-element) (@: iter element))
          (sink original-iter value)
          (return (successor original-iter)))))

    #|
    @fn erase

    Remove the element at the specified position from the vector.

    @param vecp     The vector pointer.
    @param-type     (p (Vector T))
    @param iter     The iterator for the position.
    @param-type     (Iterator (Vector T))
    @linkage        extern
    @return-type    (Iterator (Vector T))
    |#
    (def erase
      (fn extern (Iterator (Vector (uq T))) 
                        ((unused (p (uq typenode)))
                         (iter   (Iterator (Vector (uq T)))))
        (let ((value \ (@: iter element))
              (nn    (Iterator (Vector (uq T))))
              (nn2   (Iterator (Vector (uq T))))
              (vecp  \ (@: iter parent-vector)))
          (if (= iter (end vecp))
              (return iter)
              0)
          (destroy value)
          (setf (:@ vecp size) (- (@ (:@ vecp size)) (cast 1 size)))
          (setv nn (successor iter))
          (setv nn2 iter)
          (while (!= nn (end vecp))
            (setv nn2 nn)
            (sink iter (@source nn))
            (setv nn (successor nn)))
          (setf (:@ vecp last-element) (@: nn2 element))
          (return iter))))

    #|
    @fn clear

    Remove all of the elements from the vector.

    @param vecp     The vector pointer.
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    bool
    |#
    (def clear
      (fn extern bool ((vecp (p (uq typenode))))
        (while (not (empty vecp))
          (pop-back vecp))
        true))

    #|
    @fn swap

    @param vec1     The first vector pointer.
    @param vec2     The second pointer pointer.
    @param-type     (p (Vector T))
    @param-type     (p (Vector T))
    @linkage        extern
    @return-type    void
    |#
    (def swap
      (fn extern void ((vec1 (p (uq typenode)))
                       (vec2 (p (uq typenode))))
        (let ((vec3 (uq typenode)))
          (core setf (# vec3) (@ vec1))
          (core setf vec1     (@ vec2))
          (core setf vec2     vec3)
          (return))))

    (def setf-copy (fn extern bool ((dst (p (uq typenode)))
                                    (src (p (uq typenode))))
      (init dst)
      (let ((b1 \ (begin src))
            (e1 \ (end   src)))
        (for true (!= b1 e1) (setv b1 (successor b1))
          (push-back dst (@source b1))))
      true))

    (def setf-assign (fn extern bool ((dst (p (uq typenode)))
                                      (src (p (uq typenode))))
      (clear dst)
      (setf-copy dst src)))

    (implement Container (uq typenode))
    (implement Type (p (uq typenode)))
    (mfor F (= <)
      (instantiate F (uq typenode)))
    (mfor F (!= <= > >=)
      (instantiate F (p (uq typenode))))

    (mfor F (= != < > <= >=)
      (def F
        (fn extern bool ((fst (uq typenode))
                         (snd (uq typenode)))
          (F (# fst) (# snd)))))

    (implement EqualityComparable (uq typenode))
    (implement LessThanComparable (uq typenode))

    (def destroy
      (fn extern void ((vecp (p (uq typenode))))
        (clear vecp)
        (return)))

    (implement Type (Iterator (Vector (uq T))))
    (implement Type (ReverseIterator (Vector (uq T))))
    (instantiate swap (Iterator (Vector (uq T))))
    (instantiate swap (ReverseIterator (Vector (uq T))))
    (implement OutputIterator (Iterator (Vector (uq T))))
    (implement OutputIterator (ReverseIterator (Vector (uq T))))
    (implement RandomAccessIterator (Iterator (Vector (uq T))))
    (implement RandomAccessIterator (ReverseIterator (Vector (uq T))))
    (implement BackInsertionSequence (uq typenode))
    (implement RandomAccessContainer (uq typenode))
    ))
   )))
))
