#|
@module utility

Provides the common functions and macros used by the container and
algorithm modules.

|#
(module utility (attr cto))

(import cstdio)
(import macros)
(import concepts)
(import ctype)

(def tts (fn intern bool ((T (p DNode)) (buf (p char)))
  (if (and (= 0 (@:@ T is-list))
           (std.isdigit (@ (@:@ T token-str))))
      (do (sprintf buf "%s" (@:@ T token-str))
          true)
      (type-to-string T buf))))

(def ttds (fn intern bool ((T (p DNode)) (buf (p char)))
  (if (and (= 0 (@:@ T is-list))
           (std.isdigit (@ (@:@ T token-str))))
      (do (sprintf buf "%s" (@:@ T token-str))
          true)
      (type-to-display-string T buf))))

#|
@fn make-type-string

Writes the prefix, and the internal string representation of the type
node, to the provided buffer. If the type node is a token that begins
with a digit, then the token's contents are written to the buffer
instead.

@param prefix   The type string prefix.
@param T        The type node.
@param buf      The buffer for the type string.
|#
(def make-type-string
  (fn extern bool ((prefix (const (p char)))
                   (T (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (and (not (tts T tstr1))
           (return false))
      (sprintf buf "%s%s" prefix tstr1)
      true)))

#|
@fn make-type-string

As per the earlier implementation, except that it takes two type
nodes.

@param prefix   The type string prefix.
@param T1       The first type node.
@param T2       The second type node.
@param buf      The buffer for the type string.
|#
(def make-type-string
  (fn extern bool ((prefix (const (p char)))
                   (T1 (p DNode))
                   (T2 (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char))
          (tstr2 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (setf ($ tstr2 0) #\NULL)
      (and (not (tts T1 tstr1))
           (return false))
      (and (not (tts T2 tstr2))
           (return false))
      (sprintf buf "%s%s%s" prefix tstr1 tstr2)
      true)))

#|
@fn make-type-string

As per the earlier implementation, except that it takes three type
nodes.

@param prefix   The type string prefix.
@param T1       The first type node.
@param T2       The second type node.
@param T3       The third type node.
@param buf      The buffer for the type string.
|#
(def make-type-string
  (fn extern bool ((prefix (const (p char)))
                   (T1 (p DNode))
                   (T2 (p DNode))
                   (T3 (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char))
          (tstr2 (array-of 250 char))
          (tstr3 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (setf ($ tstr2 0) #\NULL)
      (setf ($ tstr3 0) #\NULL)
      (and (not (tts T1 tstr1))
           (return false))
      (and (not (tts T2 tstr2))
           (return false))
      (and (not (tts T3 tstr2))
           (return false))
      (sprintf buf "%s%s%s%s" prefix tstr1 tstr2 tstr3)
      true)))

#|
@fn make-type-display-string

Similar to `make-type-string`, except that it adds the display
representation (i.e. the one set by way of `register-type`, if
applicable) to the buffer, rather than the internal representation.

@param prefix   The type display string prefix.
@param T        The type node.
@param buf      The buffer for the type display string.
|#
(def make-type-display-string
  (fn extern bool ((prefix (const (p char)))
                   (T (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (and (not (ttds T tstr1))
           (return false))
      (sprintf buf "(%s %s)" prefix tstr1)
      true)))

#|
@fn make-type-display-string

As per the earlier implementation, except that it takes two type
nodes.

@param prefix   The type display string prefix.
@param T1       The first type node.
@param T2       The second type node.
@param buf      The buffer for the type display string.
|#
(def make-type-display-string
  (fn extern bool ((prefix (const (p char)))
                   (T1 (p DNode))
                   (T2 (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char))
          (tstr2 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (setf ($ tstr2 0) #\NULL)
      (and (not (ttds T1 tstr1))
           (return false))
      (and (not (ttds T2 tstr2))
           (return false))
      (sprintf buf "(%s %s %s)" prefix tstr1 tstr2)
      true)))

#|
@fn make-type-display-string

As per the earlier implementation, except that it takes two type
nodes.

@param prefix   The type display string prefix.
@param T1       The first type node.
@param T2       The second type node.
@param T3       The third type node.
@param buf      The buffer for the type display string.
|#
(def make-type-display-string
  (fn extern bool ((prefix (const (p char)))
                   (T1 (p DNode))
                   (T2 (p DNode))
                   (T3 (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char))
          (tstr2 (array-of 250 char))
          (tstr3 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (setf ($ tstr2 0) #\NULL)
      (setf ($ tstr3 0) #\NULL)
      (and (not (ttds T1 tstr1))
           (return false))
      (and (not (ttds T2 tstr2))
           (return false))
      (and (not (ttds T3 tstr3))
           (return false))
      (sprintf buf "(%s %s %s %s)" prefix tstr1 tstr2 tstr3)
      true)))

(using-namespace std.macros
(using-namespace std.concepts

#|
@macro Iterator

Expands to a string that can be used as the `Iterator` type name for
the argument type.

@param T    The type node.
|#
(def Iterator
  (macro extern (T)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string "iterator" T typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (mnfv mcontext typename)))
      (return n))))

#|
@macro ReverseIterator

Expands to a string that can be used as the `Iterator` type name for
the argument type.

@param T    The type node.
|#
(def ReverseIterator
  (macro extern (T)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string "riterator" T typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (mnfv mcontext typename)))
      (return n))))

#|
@concept-macro Pair

Expands to a struct definition with two members, named `first` and
`second`.

@param T1   The first type node.
@param T2   The second type node.
|#
(def-concept-macro Pair extern ((T1 Type) (T2 Type))
  (let ((typename (array-of 250 char))
        (etypename (array-of 250 char)))
    (and (not (make-type-string "pair" T1 T2 typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string "Pair" T1 T2 etypename))
         (return (nullptr DNode)))
    (register-type typename etypename)
    (if (exists-type (qq Pair (uq T1) (uq T2)))
        (do (return (nullptr DNode)) 0)
        0)
    (def n (var auto (p DNode) (mnfv mcontext typename)))
    (qq def (uq n)
      (struct extern ((first (uq T1)) (second (uq T2)))))))

#|
@macro Pair

Expands to the concrete type name of the `Pair` generated by way of
the concept macro.

@param T1   The first type node.
@param T2   The second type node.
|#
(def Pair
  (macro extern (T1 T2)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string "pair" T1 T2 typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (std.macros.mnfv mcontext typename)))
      (return n))))

#|
@concept-macro Triple

Expands to a struct definition with three members, named `first`,
`second` and `third`.

@param T1   The first type node.
@param T2   The second type node.
@param T3   The third type node.
|#
(def-concept-macro Triple extern ((T1 Type) (T2 Type) (T3 Type))
  (let ((typename  (array-of 250 char))
        (etypename (array-of 250 char)))
    (and (not (make-type-string "triple" T1 T2 T3 typename))
         (return (nullptr DNode)))
    (and (not (make-type-display-string "Triple" T1 T2 T3 etypename))
         (return (nullptr DNode)))
    (register-type typename etypename)
    (def n (var auto (p DNode) (std.macros.mnfv mcontext typename)))
    (qq def (uq n)
      (struct extern ((first (uq T1)) (second (uq T2)) (third (uq T3)))))))

#|
@macro Triple

Expands to the concrete type name of the `Triple` generated by way of
the concept macro.

@param T1   The first type node.
@param T2   The second type node.
@param T3   The third type node.
|#
(def Triple
  (macro extern (T1 T2 T3)
    (let ((typename (array-of 250 char)))
      (and (not (make-type-string "triple" T1 T2 T3 typename))
           (return (nullptr DNode)))
      (def n (var auto (p DNode) (std.macros.mnfv mcontext typename)))
      (return n))))
))
