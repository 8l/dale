(import cstdio)
(import cstdlib)
(import cstring)
(import unistd)

; Common functions.

(def getline (fn intern int ((buf (p char)) (limit int))
  (def b (var auto int 0))
  (def c (var auto int 0))
  (while (< c limit)
    (setv b (fread (cast buf (p void)) 1 1 stdin))
    (and (= 0 b)
         (do (setf buf #\NULL)
             (return c)))
    (and (= #\NEWLINE (@ buf))
         (do (setf (p+ buf 1) #\NULL)
             (incv c)
             (return c)))
    (setv buf (p+ buf b))
    (incv c))
  (return c)))

(def getelement (fn intern bool ((str   (p (const char)))
                                 (begin (p (const char)))
                                 (end   (p (const char)))
                                 (buf   (p char)))
  (let ((fb \ (if (null begin) str (strstr str begin))))
    (and (null fb) (return false))
    (let ((fbe \ (p+ fb (if (null begin) (cast 0 size) (strlen begin))))
          (fe  \ (strstr fbe end)))
      (strncpy buf fbe (cast (p- fe fbe) int))
      (setf ($ buf (cast (p- fe fbe) int)) #\NULL)
      (return true)))))

(def rmws (fn intern (p char) ((str (p (const char))))
  (while (= (@ str) #\SPACE)
    (setv str (p+ str 1)))
  (return str)))

(def err (fn intern bool ((buf (p (const char))))
  (fprintf stderr "error: %s.\n" buf)
  (exit 1)
  (return false)))

; Structs.

(def memberdef
  (struct intern ((name (p char))
                  (type (p char)))))

(def structdef
  (struct intern ((name    (p char))
                  (linkage (p char))
                  (info    (p char))
                  (members (p memberdef)))))

(def structdefs (var intern (array-of 100 structdef)))
(def structdefi (var intern int 0))
(def addstructdef (fn intern void ((name (p char))
                                   (linkage (p char))
                                   (info (p char))
                                   (members (p memberdef)))
  (setf ($ structdefs structdefi)
        ((name    name)
         (linkage (rmws linkage))
         (info    info)
         (members members)))
  (incv structdefi)
  (return)))

(def handle-struct (fn intern bool ((buf (p (const char))))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (def linkage (var auto (p char) (malloc' 32 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \ (getelement buf "@struct " "\n" name)))
  (and (not n) (err "no struct name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto \ 1))
  (def linecount (var auto \ 0))
  (def ws (var auto \ 0))
  (getline mybuf 255)

  (while (do (setv c (getline mybuf 255))
             (and (!= c 0)
                  (p= (nullptr char) (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (= 0 linecount)
        (do (while (= #\SPACE (@$ mybufp 0))
              (do (incv ws)
                  (setv mybufp (p+ mybufp 1))))
            true)
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true))
    (incv linecount)
    (strcat info mybufp))

  (while (and (!= c 0)
              (not (p= (nullptr char) (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true)
    (setv n (getelement mybufp "@linkage " "\n" linkage))
    (setv c (getline mybuf 255)))

  (def members (var auto \ (malloc' 10 memberdef)))
  (def memberi (var auto \ 0))
  (def memberbuf (var auto (array-of 255 char)))

  (setf (: ($ members memberi) name) (nullptr char))

  (addstructdef name linkage info members)
  true))

; Functions, macros, concept macros.

(def FN    (var intern int 0))
(def MACRO (var intern int 1))
(def CMACRO (var intern int 2))

(def paramdef
  (struct intern ((name (p char))
                  (type (p char))
                  (info (p char)))))
(def fndef
  (struct intern ((name    (p char))
                  (linkage (p char))
                  (returns (p char))
                  (info    (p char))
                  (params  (p paramdef)))))
(def fndefs (var intern (array-of 100 fndef)))
(def fndefi (var intern int 0))
(def macdefs (var intern (array-of 100 fndef)))
(def macdefi (var intern int 0))
(def cmacdefs (var intern (array-of 100 fndef)))
(def cmacdefi (var intern int 0))
(def addfndef (fn intern void ((name (p char))
                               (linkage (p char))
                               (returns (p char))
                               (info (p char))
                               (params (p paramdef))
                               (type int))
  (def fndef (var auto fndef
        ((name    name)
         (linkage (rmws linkage))
         (returns (rmws returns))
         (info    info)
         (params  params))))
  (if (= type FN)
      (do (setf ($ fndefs fndefi) fndef)
          (incv fndefi))
  (if (= type MACRO)
      (do (setf ($ macdefs macdefi) fndef)
          (incv macdefi))
      (do (setf ($ cmacdefs cmacdefi) fndef)
          (incv cmacdefi))))
  (return)))

(def handle-fn (fn intern bool ((buf (p (const char)))
                                (type int))
  (def name (var auto (p char) (malloc' 255 char)))
  (def info (var auto (p char) (malloc' 2048 char)))
  (def linkage (var auto (p char) (malloc' 32 char)))
  (def returns (var auto (p char) (malloc' 255 char)))
  (setf ($ info 0) #\NULL)
  (def n (var auto \
    (getelement buf (if (= type FN)
                        "@fn "
                    (if (= type MACRO)
                        "@macro "
                        "@concept-macro "))
                "\n" name)))
  (and (not n) (err "no fn name found"))

  (def mybuf (var auto (array-of 255 char)))
  (def mybufp (var auto (p char) ($ mybuf 0)))
  (def c (var auto \ 1))
  (def linecount (var auto \ 0))
  (def ws (var auto \ 0))
  (getline mybuf 255)

  (while (do (setv c (getline mybuf 255))
             (and (!= c 0)
                  (p= (nullptr char) (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (= 0 linecount)
        (do (while (= #\SPACE (@$ mybufp 0))
              (do (incv ws)
                  (setv mybufp (p+ mybufp 1))))
            true)
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true))
    (incv linecount)
    (strcat info mybufp))

  (def params (var auto \ (malloc' 10 paramdef)))
  (def parami (var auto \ 0))
  (def parambuf (var auto (array-of 255 char)))

  (while (and (!= c 0)
              (not (p= (nullptr char) (strstr mybuf "@"))))
    (setv mybufp ($ mybuf 0))
    (if (> c ws)
        (setv mybufp (p+ mybufp ws))
        true)
    (setv n (getelement mybufp "@linkage " "\n" linkage))
    (and (not n)
         (setv n (getelement mybufp "@return-type " "\n" returns)))
    (and (not n)
         (do (setv n (getelement mybufp "@param " " " parambuf))
             (and n
                 (do (def paramname (var auto \ (malloc' 255 char)))
                     (def paramtype (var auto \ (malloc' 255 char)))
                     (def paraminfo (var auto \ (malloc' 255 char)))
                     (strcpy paramname parambuf)
                     (setv mybufp (p+ (strstr mybufp "@param ")
                                      (+ (cast 7 size)
                                         (strlen paramname))))
                     (setv n (getelement mybufp " " "\n" paraminfo))
                     (and (not n) (err "no parameter info found"))
                     (setv c (getline mybuf 255))
                     (and (= c 0) (err "no parameter type line found"))
                     (setv mybufp ($ mybuf 0))
                     (setv n (getelement mybufp "@param-type " "\n" paramtype))
                     (setf ($ params parami) ((name paramname)
                                              (type (if (not n)
                                                        (nullptr char)
                                                        paramtype))
                                              (info paraminfo)))
                     (incv parami)))))
    ; todo: parsing other parts goes here.
    (setv c (getline mybuf 255)))

  (setf (: ($ params parami) name) (nullptr char))

  (addfndef name linkage returns info params type)
  true))

; Main.

(def main (fn extern-c int (void)
  (def buf (var auto (array-of 255 char)))
  (getline buf 255)
  (getline buf 255)
  (def module-name (var auto (array-of 255 char)))
  (def n (var auto \ (getelement buf "@module " "\n" module-name)))
  (and (not n) (err "unable to find module name"))

  (printf "### Details\n\nModule: %s\n\n" module-name)
  (printf "### Description\n")
  (while (do (getline buf 255) (!= 0 (strcmp buf "|#\n")))
    (printf "%s" buf))

  (def c (var auto \ 1))

  (while (!= c 0)
    (while (do (setv c (getline buf 255))
               (and (!= c 0)
                    (p= (nullptr char) (strstr buf "#|\n")))) true)
    (and (!= c 0)
         (do
            (getline buf 255)
            (def type (var auto (array-of 255 char)))
            (setv n (getelement buf "@" " " type))
            ;(and n (do (fprintf stderr "B (%s) (%s) E\n" buf type) true))
            (and (not n) (err "invalid definition"))
            (if (= 0 (strcmp type "struct"))
                (handle-struct buf)
            (if (= 0 (strcmp type "fn"))
                (handle-fn buf FN)
            (if (= 0 (strcmp type "macro"))
                (handle-fn buf MACRO)
            (if (= 0 (strcmp type "concept-macro"))
                (handle-fn buf CMACRO)
                true)))))))

  (and (> structdefi 0) (do (printf "\n\n### Structs\n\n") true))
  (let ((i \ 0))
    (for true (< i structdefi) (incv i)
      (def linkage (var auto \ (@: (@$ structdefs i) linkage)))
      (and (= 0 (cast (strlen linkage) int))
           (setv linkage "N/A"))
      (def members (var auto \ (@: (@$ structdefs i) members)))
      (printf "#### `%s`\n\n" (@: (@$ structdefs i) name))
      (printf "Linkage: `%s`\n" linkage)
      (printf "Members:")
      (if (or (null members) (null (@:@ members name)))
          (printf " N/A\n")
          (do (printf "\n\n")
              (while (and (not (null members))
                          (not (null (@:@ members name))))
                (printf "  * `(%s %s)`\n"
                        (@:@ members name)
                        (rmws (@:@ members type))
                (setv members (p+ members 1)))
              (printf "\n"))))
      (printf "\n")
      (printf "%s\n" (@: (@$ structdefs i) info))
      0))

  (and (> fndefi 0) (do (printf "\n\n### Functions\n\n") true))
  (let ((i \ 0))
    (for true (< i fndefi) (incv i)
      (def linkage (var auto \ (@: (@$ fndefs i) linkage)))
      (and (= 0 (cast (strlen linkage) int))
           (setv linkage "N/A"))
      (def params (var auto \ (@: (@$ fndefs i) params)))
      (printf "#### `%s`\n\n" (@: (@$ fndefs i) name))
      (printf "Linkage: `%s`\n" linkage)
      (printf "Returns: `%s`\n" (@: (@$ fndefs i) returns))
      (printf "Parameters:")
      (if (null params)
          (printf " N/A\n")
          (do (printf "\n\n")
              (while (and (not (null params))
                          (not (null (@:@ params name))))
                (if (not (null (@:@ params type)))
                    (printf "  * `(%s %s)`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params type))
                            (rmws (@:@ params info)))
                    (printf "  * `%s`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params info))))
                (setv params (p+ params 1)))
              (printf "\n")))
      (printf "\n")
      (printf "%s\n" (@: (@$ fndefs i) info))
      0))

  (and (> cmacdefi 0) (do (printf "\n\n### Concept macros\n\n") true))
  (let ((i \ 0))
    (for true (< i cmacdefi) (incv i)
      (def linkage (var auto \ (@: (@$ cmacdefs i) linkage)))
      (and (= 0 (cast (strlen linkage) int))
           (setv linkage "N/A"))
      (def params (var auto \ (@: (@$ cmacdefs i) params)))
      (printf "#### `%s`\n\n" (@: (@$ cmacdefs i) name))
      (printf "Linkage: `%s`\n" linkage)
      (printf "Parameters:")
      (if (null params)
          (printf " N/A\n")
          (do (printf "\n\n")
              (while (and (not (null params))
                          (not (null (@:@ params name))))
                (if (not (null (@:@ params type)))
                    (printf "  * `(%s %s)`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params type))
                            (rmws (@:@ params info)))
                    (printf "  * `%s`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params info))))
                (setv params (p+ params 1)))
              (printf "\n")))
      (printf "\n")
      (printf "%s\n" (@: (@$ cmacdefs i) info))
      0))

  (and (> macdefi 0) (do (printf "\n\n### Macros\n\n") true))
  (let ((i \ 0))
    (for true (< i macdefi) (incv i)
      (def linkage (var auto \ (@: (@$ macdefs i) linkage)))
      (and (= 0 (cast (strlen linkage) int))
           (setv linkage "N/A"))
      (def params (var auto \ (@: (@$ macdefs i) params)))
      (printf "#### `%s`\n\n" (@: (@$ macdefs i) name))
      (printf "Linkage: `%s`\n" linkage)
      (printf "Parameters:")
      (if (null params)
          (printf " N/A\n")
          (do (printf "\n\n")
              (while (and (not (null params))
                          (not (null (@:@ params name))))
                (if (not (null (@:@ params type)))
                    (printf "  * `(%s %s)`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params type))
                            (rmws (@:@ params info)))
                    (printf "  * `%s`: %s\n"
                            (@:@ params name)
                            (rmws (@:@ params info))))
                (setv params (p+ params 1)))
              (printf "\n")))
      (printf "\n")
      (printf "%s\n" (@: (@$ macdefs i) info))
      0))

  0))
